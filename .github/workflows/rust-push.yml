name: Rust Push

on:
  push:
    branches: [ "main" ]

permissions:
  # deployments permission to deploy GitHub pages website
  deployments: write
  # contents permission to update benchmark contents in gh-pages branch
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always

jobs:
  check-files:
    runs-on: ubuntu-latest
    outputs:
      file_changed: ${{ steps.check.outputs.changed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if specific file changed
        id: check
        run: |
          if git diff --name-only HEAD~1 HEAD | grep -q "build/Dockerfile"; then
            echo "changed=true"
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false"
            echo "changed=false" >> $GITHUB_OUTPUT
          fi
  docker:
    needs: check-files
    if: needs.check-files.outputs.file_changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: aviavni/falkordb-build:latest
          context: ./build
  test:
    runs-on: ubuntu-latest
    container: aviavni/falkordb-build:latest
    needs: docker
    if: always()
    steps:
      - uses: actions/checkout@v4
      - name: Format
        run: |
          rustup default stable
          cargo fmt --all --check
      - name: Lint
        run: |
          cargo clippy --all --all-targets
      - name: Build
        run: |
          cargo build
      - name: Run unit tests
        run: |
          cargo test -p graph
      - name: Run tests
        run: |
          . /data/venv/bin/activate
          pytest tests/test_e2e.py tests/test_functions.py -vv
      - name: Run TCK tests
        run: |
          . /data/venv/bin/activate
          TCK_DONE=tck_done.txt pytest tests/tck/test_tck.py
  coverage:
    runs-on: ubuntu-latest
    container: aviavni/falkordb-build:latest
    needs: docker
    if: always()
    steps:
      - uses: actions/checkout@v4
      - name: Run code coverage
        run: |
          rustup default stable
          RUSTFLAGS="-C instrument-coverage" cargo build
          RUSTFLAGS="-C instrument-coverage" cargo test -p graph
          mkdir cov
          cd cov
          . /data/venv/bin/activate
          TARGET=../target/debug/libfalkordb.so pytest ../tests/test_e2e.py ../tests/test_functions.py -vv
          TARGET=../target/debug/libfalkordb.so TCK_FEATURES=../tests/tck/features/ TCK_DONE=../tck_done.txt pytest ../tests/tck/test_tck.py
          llvm-profdata-20 merge --sparse `find . -name "*.profraw"` -o cov.profdata
          llvm-cov-20 export --format=lcov --instr-profile cov.profdata ../target/debug/libfalkordb.so > codecov.txt.all
          lcov --ignore-errors unused -r codecov.txt.all -o codecov.txt
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
  benchmark:
    runs-on: ubuntu-latest
    container: aviavni/falkordb-build:latest
    needs: docker
    if: always()
    steps:
      - uses: actions/checkout@v4
      - name: Run benchmark
        run: |
          git config --global --add safe.directory $GITHUB_WORKSPACE
          rustup default stable
          cargo build --release
          . /data/venv/bin/activate
          pytest tests/test_bench.py --benchmark-json output.json
      - name: Store benchmark result
        uses: benchmark-action/github-action-benchmark@v1
        with:
          name: FalkorDB Benchmark
          tool: 'pytest'
          output-file-path: output.json
          # Access token to deploy GitHub Pages branch
          github-token: ${{ secrets.GITHUB_TOKEN }}
          # Push and deploy GitHub pages branch automatically
          auto-push: true
  falkordb-e2e-compatibility:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    services:
      falkordb:
        image: falkordb/falkordb:latest
        ports:
          - 6379:6379
        volumes:
          - ./data:/var/lib/falkordb/data
        options: >-
          --rm
          -it
    steps:
      - uses: actions/checkout@v4
      - name: Wait for FalkorDB to be ready
        run: |
          # Wait until port 6379 is open (max 30 seconds)
          for i in {1..30}; do
            if nc -z localhost 6379; then
              echo "FalkorDB is up!"
              break
            fi
            echo "Waiting for FalkorDB..."
            sleep 1
          done
      - name: Run FalkorDB e2e tests
        run: |
          sudo apt install -y python3-venv
          python3 -m venv venv
          . venv/bin/activate
          pip install -r  tests/requierment.txt
          pytest -v -m "not extra" tests/test_e2e.py tests/test_functions.py -vv
