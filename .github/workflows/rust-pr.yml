name: Rust PR

on:
  pull_request:
    branches: [ "main" ]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: read

jobs:
  check-files:
    runs-on: ubuntu-latest
    outputs:
      file_changed: ${{ steps.check.outputs.changed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check if specific file changed
        id: check
        run: |
          if git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -q "build/Dockerfile"; then
            echo "changed=true"
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false"
            echo "changed=false" >> $GITHUB_OUTPUT
          fi
  docker:
    needs: check-files
    if: needs.check-files.outputs.file_changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2
      - name: Build and push
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83
        with:
          push: true
          tags: aviavni/falkordb-build:${{ github.event.pull_request.number }}
          context: ./build
  test:
    runs-on: ubuntu-latest
    container: aviavni/falkordb-build:${{ needs.check-files.outputs.file_changed == 'true' && github.event.pull_request.number || 'latest' }}
    needs:
      - check-files
      - docker
    if: ${{ !cancelled() }}
    env:
      CARGO_FUZZ_VERSION: 0.12.0
    steps:
      - uses: actions/checkout@v4
      - run: rustup default stable
      - uses: actions/cache@v4
        with:
          path: ${{ runner.tool_cache }}/cargo-fuzz
          key: cargo-fuzz-bin-${{ env.CARGO_FUZZ_VERSION }}
      - run: echo "${{ runner.tool_cache }}/cargo-fuzz/bin" >> $GITHUB_PATH
      - run: cargo install --root "${{ runner.tool_cache }}/cargo-fuzz" --version ${{ env.CARGO_FUZZ_VERSION }} cargo-fuzz --locked
      - name: Format
        run: cargo fmt --all --check
      - name: Lint
        run: |
          CXX=clang++-20 cargo clippy --all --all-targets
      - name: Build
        run: |
          cargo build
      - name: Run unit tests
        run: |
          cargo test -p graph
      - name: Run tests
        run: |
          . /data/venv/bin/activate
          pytest tests/test_e2e.py tests/test_functions.py -vv
      - name: Run TCK tests
        run: |
          . /data/venv/bin/activate
          TCK_DONE=tck_done.txt pytest tests/tck/test_tck.py -s
  coverage:
    runs-on: ubuntu-latest
    container: aviavni/falkordb-build:${{ needs.check-files.outputs.file_changed == 'true' && github.event.pull_request.number || 'latest' }}
    needs:
      - check-files
      - docker
    if: ${{ !cancelled() }}
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Run code coverage
        run: |
          rustup default stable
          RUSTFLAGS="-C instrument-coverage" cargo build
          RUSTFLAGS="-C instrument-coverage" cargo test -p graph
          mkdir cov
          cd cov
          . /data/venv/bin/activate
          TARGET=../target/debug/libfalkordb.so pytest ../tests/test_e2e.py ../tests/test_functions.py -vv
          TARGET=../target/debug/libfalkordb.so TCK_FEATURES=../tests/tck/features/ TCK_DONE=../tck_done.txt pytest ../tests/tck/test_tck.py -s
          llvm-profdata-20 merge --sparse `find . -name "*.profraw"` -o cov.profdata
          llvm-cov-20 export --format=lcov --instr-profile cov.profdata ../target/debug/libfalkordb.so > codecov.txt.all
          lcov --ignore-errors unused -r codecov.txt.all -o codecov.txt
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@18283e04ce6e62d37312384ff67231eb8fd56d24
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
  fuzz:
    runs-on: ubuntu-latest
    container: aviavni/falkordb-build:${{ needs.check-files.outputs.file_changed == 'true' && github.event.pull_request.number || 'latest' }}
    needs:
      - check-files
      - docker
    if: ${{ !cancelled() }}
    env:
      CARGO_FUZZ_VERSION: 0.12.0
    steps:
      - uses: actions/checkout@v4
      - run: rustup default nightly
      - uses: actions/cache@v4
        with:
          path: ${{ runner.tool_cache }}/cargo-fuzz
          key: cargo-fuzz-bin-${{ env.CARGO_FUZZ_VERSION }}
      - run: echo "${{ runner.tool_cache }}/cargo-fuzz/bin" >> $GITHUB_PATH
      - run: cargo install --root "${{ runner.tool_cache }}/cargo-fuzz" --version ${{ env.CARGO_FUZZ_VERSION }} cargo-fuzz --locked
      - uses: actions/download-artifact@v4
        with:
          name: fuzzing-corpus
          path: fuzz/corpus
        continue-on-error: true
      - name: Run fuzz tests
        run: |
          cargo build --features fuzz
          . /data/venv/bin/activate
          mkdir -p fuzz/corpus/fuzz_target_runtime/
          TCK_DONE=tck_done.txt pytest tests/tck/test_tck.py -s
          CXX=clang++-20 CARGO_PROFILE_RELEASE_LTO=false cargo fuzz build fuzz_target_runtime
          CXX=clang++-20 CARGO_PROFILE_RELEASE_LTO=false cargo fuzz run fuzz_target_runtime -- -max_total_time=300
          CXX=clang++-20 CARGO_PROFILE_RELEASE_LTO=false cargo fuzz cmin fuzz_target_runtime
          CXX=clang++-20 CARGO_PROFILE_RELEASE_LTO=false cargo fuzz coverage fuzz_target_runtime
          llvm-cov-20 export --format=lcov --instr-profile fuzz/coverage/fuzz_target_runtime/coverage.profdata target/aarch64-apple-darwin/coverage/aarch64-apple-darwin/release/fuzz_target_runtime > codecov.txt.all
          lcov --ignore-errors unused -r codecov.txt.all -o codecov.txt
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@18283e04ce6e62d37312384ff67231eb8fd56d24
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: fuzz
      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: fuzzing-corpus
          path: fuzz/corpus
      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: fuzzing-artifacts-fuzz_target_runtime-${{ github.sha }}
          path: fuzz/artifacts
  benchmark:
    runs-on: ubuntu-latest
    container: aviavni/falkordb-build:${{ needs.check-files.outputs.file_changed == 'true' && github.event.pull_request.number || 'latest' }}
    needs:
      - check-files
      - docker
    if: ${{ !cancelled() }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Run benchmark
        run: |
          git config --global --add safe.directory $GITHUB_WORKSPACE
          rustup default stable
          cargo build --release
          . /data/venv/bin/activate
          pytest tests/test_bench.py --benchmark-json output.json -vv
      - name: Store benchmark result
        uses: benchmark-action/github-action-benchmark@d48d326b4ca9ba73ca0cd0d59f108f9e02a381c7
        with:
          name: FalkorDB Benchmark
          tool: 'pytest'
          output-file-path: output.json
          # GitHub API token to make a commit comment
          github-token: ${{ secrets.GITHUB_TOKEN }}
          summary-always: true
          # Don't push to gh-pages branch in the PR
          auto-push: false
  falkordb-e2e-compatibility:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    services:
      falkordb:
        image: falkordb/falkordb:latest
        ports:
          - 6379:6379
        volumes:
          - ./data:/var/lib/falkordb/data
        options: >-
          --rm
          -it
    steps:
      - uses: actions/checkout@v4
      - name: Wait for FalkorDB to be ready
        run: |
          # Wait until port 6379 is open (max 30 seconds)
          for i in {1..30}; do
            if nc -z localhost 6379; then
              echo "FalkorDB is up!"
              break
            fi
            echo "Waiting for FalkorDB..."
            sleep 1
          done
      - name: Run FalkorDB e2e tests
        run: |
          sudo apt install -y python3-venv
          python3 -m venv venv
          . venv/bin/activate
          pip install -r  tests/requierment.txt
          pytest -v -m "not extra" tests/test_e2e.py tests/test_functions.py -vv
